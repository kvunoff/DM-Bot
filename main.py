
import secrets
import telebot
from telebot import types
import sys
import os
import mss
import mss.tools
import subprocess
import time
import imageio
import numpy as np
import requests
from requests.exceptions import ConnectionError, ReadTimeout
import hashlib
import json
import tkinter as tk
from tkinter import messagebox
import pyperclip
import tempfile

TOKEN = ""
TOKEN_INITIALIZED = False
if getattr(sys, 'frozen', False):
    USER_DATA_FILE = os.path.join(tempfile.gettempdir(), "user_data.json")
else:
    USER_DATA_FILE = "user_data.json"
bot = None
VIDEO_RECORDING = False
ACCESS_CODE_TIMEOUT = 60
AUTHORIZED_USERS = {}
ACCESS_CODES = {}

def generate_access_code():
    random_string = secrets.token_hex(16)
    hashed_code = hashlib.sha256(random_string.encode()).hexdigest()
    return hashed_code, random_string

def store_access_code(telegram_id, hashed_code, random_string):
    access_file = f"access_{telegram_id}.tmp"
    try:
        with open(access_file, "w") as file:
            file.write(f"{hashed_code}\n{random_string}")
        return access_file
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ñ–∞–π–ª–∞ –¥–æ—Å—Ç—É–ø–∞: {e}")
        return None

def verify_access_code(telegram_id, user_input):
    try:
        hashed_code, random_string = ACCESS_CODES[telegram_id]
    except KeyError:
        return False

    input_hashed_code = hashlib.sha256(user_input.encode()).hexdigest()
    if input_hashed_code == hashed_code == hashed_code:
        return True
    else:
        return False

def clear_access_code(telegram_id):
    try:
        del ACCESS_CODES[telegram_id]
    except KeyError:
        pass

def load_user_data():
    global AUTHORIZED_USERS
    try:
        with open(USER_DATA_FILE, "r") as f:
            AUTHORIZED_USERS = json.load(f)
    except FileNotFoundError:
        AUTHORIZED_USERS = {}
    except json.JSONDecodeError:
        print("–û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞ user_data.json. –§–∞–π–ª –±—É–¥–µ—Ç –ø–µ—Ä–µ–∑–∞–ø–∏—Å–∞–Ω.")
        AUTHORIZED_USERS = {}

def save_user_data():
    try:
        with open(USER_DATA_FILE, "w") as f:
            json.dump(AUTHORIZED_USERS, f)
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {e}")

load_user_data()

def is_authorized(telegram_id):
    return AUTHORIZED_USERS.get(str(telegram_id), False)

def take_screenshot():
    try:
        with mss.mss() as sct:
            sct_img = sct.grab(sct.monitors[1])
            output = "screenshot.png"
            mss.tools.to_png(sct_img.rgb, sct_img.size, output=output)
            return output, None
    except Exception as e:
        return None, f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å–∫—Ä–∏–Ω—à–æ—Ç–∞: {e}"

def send_screenshot(message):
    screenshot_file, error_message = take_screenshot()
    if error_message:
        bot.send_message(message.chat.id, error_message)
        return
    if screenshot_file:
        try:
            with open(screenshot_file, "rb") as photo:
                bot.send_photo(message.chat.id, photo)
        except FileNotFoundError:
            bot.send_message(message.chat.id, "–û—à–∏–±–∫–∞: –§–∞–π–ª —Å–∫—Ä–∏–Ω—à–æ—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        except Exception as e:
            bot.send_message(message.chat.id, f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–∫—Ä–∏–Ω—à–æ—Ç–∞: {e}")
        finally:
            try:
                os.remove(screenshot_file)
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞: {e}")
    else:
        bot.send_message(message.chat.id, "–ù–µ —É–¥–∞–ª–æ—Å—å —Å–¥–µ–ª–∞—Ç—å —Å–∫—Ä–∏–Ω—à–æ—Ç.")

def record_screen(duration=10):
    global VIDEO_RECORDING
    VIDEO_RECORDING = True

    if getattr(sys, 'frozen', False):
        temp_dir = tempfile.gettempdir()
    else:
        temp_dir = os.getcwd()
    filename = os.path.join(temp_dir, "screen_record.mp4")
    try:
        with mss.mss() as sct:
            monitor = sct.monitors[1]
            width = monitor["width"]
            height = monitor["height"]

            writer = imageio.get_writer(filename, fps=20)

            start_time = time.time()
            while time.time() - start_time < duration and VIDEO_RECORDING:
                img = sct.grab(monitor)
                frame = np.array(img)

                if frame.shape[2] == 4:
                    frame = frame[:, :, [2, 1, 0, 3]]
                elif frame.shape[2] == 3:
                    frame = frame[:, :, [2, 1, 0]]

                writer.append_data(frame)

            writer.close()
        return filename, None
    except Exception as e:
        return None, f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø–∏—Å–∏ –≤–∏–¥–µ–æ: {e}"
    finally:
        VIDEO_RECORDING = False

def send_video(message):
    video_file, error_message = record_screen()
    if error_message:
        bot.send_message(message.chat.id, error_message)
        return

    if video_file:
        try:
            with open(video_file, "rb") as video:
                bot.send_video(message.chat.id, video)
        except FileNotFoundError:
            bot.send_message(message.chat.id, "–û—à–∏–±–∫–∞: –§–∞–π–ª –≤–∏–¥–µ–æ –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        except Exception as e:
            bot.send_message(message.chat.id, f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –≤–∏–¥–µ–æ: {e}")
        finally:
            try:
                os.remove(video_file)
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞: {e}")
    else:
        bot.send_message(message.chat.id, "–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø–∏—Å–∞—Ç—å –≤–∏–¥–µ–æ.")

def shutdown_pc():
    try:
        subprocess.run(["shutdown", "/s", "/t", "1"])
        return "–ü–ö –≤—ã–∫–ª—é—á–∞–µ—Ç—Å—è..."
    except Exception as e:
        return f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–∫–ª—é—á–µ–Ω–∏–∏ –ü–ö: {e}"

def lock_pc(message):
    try:
        subprocess.run(["rundll32.exe", "user32.dll,LockWorkStation"])
        bot.send_message(message.chat.id, "–ü–ö –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω!")
    except Exception as e:
        bot.send_message(message.chat.id, f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –±–ª–æ–∫–∏—Ä–æ–≤–∫–µ –ü–ö: {e}")

def authorized(func):
    def wrapper(message):
        telegram_id = str(message.from_user.id)

        if not is_authorized(telegram_id):
            if bot:
                bot.reply_to(message,
                             "–í—ã –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–∫–æ–ø–∏—Ä—É–π—Ç–µ –∫–æ–¥ –¥–æ—Å—Ç—É–ø–∞, –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º—ã–π –Ω–∞ —ç–∫—Ä–∞–Ω–µ –∫–æ–º–ø—å—é—Ç–µ—Ä–∞. *–ü–ï–†–ï–î –í–í–û–î–û–ú –ö–û–î–ê –ó–ê–ö–†–û–ô–¢–ï –û–ö–ù–û, –ì–î–ï –í–´ –ï–ì–û –ö–û–ü–ò–†–û–í–ê–õ–ò*")
                send_access_code_request(message)
            else:
                print("–ë–æ—Ç –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ç–æ–∫–µ–Ω.")
            return

        return func(message)

    return wrapper

def start(message):
    telegram_id = str(message.from_user.id)

    if not is_authorized(telegram_id):
        if bot:
            bot.reply_to(message,
                         "–í—ã –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–∫–æ–ø–∏—Ä—É–π—Ç–µ –∫–æ–¥ –¥–æ—Å—Ç—É–ø–∞, –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º—ã–π –Ω–∞ —ç–∫—Ä–∞–Ω–µ –∫–æ–º–ø—å—é—Ç–µ—Ä–∞. *–ü–ï–†–ï–î –í–í–û–î–û–ú –ö–û–î–ê –ó–ê–ö–†–û–ô–¢–ï –û–ö–ù–û, –ì–î–ï –í–´ –ï–ì–û –ö–û–ü–ò–†–û–í–ê–õ–ò*")
            send_access_code_request(message)
        else:
            print("–ë–æ—Ç –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ç–æ–∫–µ–Ω.")
        return

    show_main_menu(message)

def send_access_code_request(message):
    telegram_id = str(message.from_user.id)
    hashed_code, random_string = generate_access_code()

    ACCESS_CODES[telegram_id] = (hashed_code, random_string)

    show_access_code_window(random_string)

    bot.send_message(message.chat.id,
                     "–í–≤–µ–¥–∏—Ç–µ –∫–æ–¥ –¥–æ—Å—Ç—É–ø–∞, –∫–æ—Ç–æ—Ä—ã–π –≤—ã —Å–∫–æ–ø–∏—Ä–æ–≤–∞–ª–∏:")
    bot.register_next_step_handler(message, process_access_code, telegram_id)

def show_access_code_window(access_code):
    root = tk.Tk()
    root.title("–ö–æ–¥ –¥–æ—Å—Ç—É–ø–∞")
    root.geometry("500x150")

    label = tk.Label(root, text="–í–∞—à –∫–æ–¥ –¥–æ—Å—Ç—É–ø–∞:", font=("Arial", 12))
    label.pack(pady=10)

    code_label = tk.Label(root, text=access_code, font=("Courier", 16, "bold"))
    code_label.pack(pady=5)

    def copy_to_clipboard():
        try:
            pyperclip.copy(access_code)
            messagebox.showinfo("–°–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–æ", "–ö–æ–¥ –¥–æ—Å—Ç—É–ø–∞ —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω –≤ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞.")
        except pyperclip.PyperclipException:
            messagebox.showerror("–û—à–∏–±–∫–∞",
                                 "–ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å –≤ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞. –í–æ–∑–º–æ–∂–Ω–æ, —Ç—Ä–µ–±—É–µ—Ç—Å—è —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å xclip –∏–ª–∏ xsel.")

    copy_button = tk.Button(root, text="–ö–æ–ø–∏—Ä–æ–≤–∞—Ç—å –∫–æ–¥", command=copy_to_clipboard)
    copy_button.pack(pady=10)

    root.mainloop()

def process_access_code(message, telegram_id):
    user_input = message.text
    if verify_access_code(telegram_id, user_input):
        AUTHORIZED_USERS[str(telegram_id)] = True
        save_user_data()
        clear_access_code(telegram_id)
        bot.send_message(message.chat.id, "–ö–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω. –î–æ—Å—Ç—É–ø –∫ –±–æ—Ç—É –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω.")
        show_main_menu(message)
    else:
        bot.send_message(message.chat.id, "–ù–µ–≤–µ—Ä–Ω—ã–π –∫–æ–¥ –¥–æ—Å—Ç—É–ø–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
        clear_access_code(telegram_id)

def show_main_menu(message):
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    lock_button = types.KeyboardButton("üîí –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –ü–ö")
    screenshot_button = types.KeyboardButton("üì∏ –°–∫—Ä–∏–Ω—à–æ—Ç")
    video_button = types.KeyboardButton("üé¨ –ó–∞–ø–∏—Å–∞—Ç—å –≤–∏–¥–µ–æ")
    shutdown_button = types.KeyboardButton("üîå –í—ã–∫–ª—é—á–∏—Ç—å –ü–ö")
    clear_data_button = types.KeyboardButton("üóëÔ∏è –û—á–∏—Å—Ç–∏—Ç—å –¥–∞–Ω–Ω—ã–µ")
    markup.add(lock_button, screenshot_button, video_button, shutdown_button, clear_data_button)
    bot.send_message(message.chat.id,
                     "–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ü–ö. –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É, —á—Ç–æ–±—ã –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å, —Å–¥–µ–ª–∞—Ç—å —Å–∫—Ä–∏–Ω—à–æ—Ç, –∑–∞–ø–∏—Å–∞—Ç—å –≤–∏–¥–µ–æ –∏–ª–∏ –æ—á–∏—Å—Ç–∏—Ç—å –¥–∞–Ω–Ω—ã–µ.",
                     reply_markup=markup)

def clear_user_data(message):
    global AUTHORIZED_USERS
    AUTHORIZED_USERS = {}
    save_user_data()
    bot.send_message(message.chat.id, "–î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —É—Å–ø–µ—à–Ω–æ –æ—á–∏—â–µ–Ω—ã.")
    show_main_menu(message)

def ask_for_token():
    root = tk.Tk()
    root.title("–í–≤–µ–¥–∏—Ç–µ —Ç–æ–∫–µ–Ω Telegram-–±–æ—Ç–∞")
    root.geometry("300x150")

    label = tk.Label(root, text="–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ç–æ–∫–µ–Ω –≤–∞—à–µ–≥–æ Telegram-–±–æ—Ç–∞:", font=("Arial", 10))
    label.pack(pady=10)

    token_entry = tk.Entry(root, width=40)
    token_entry.pack(pady=5)

    def save_token():
        global TOKEN, bot, TOKEN_INITIALIZED
        TOKEN = token_entry.get()
        if TOKEN:
            try:
                bot = telebot.TeleBot(TOKEN)
                TOKEN_INITIALIZED = True
                messagebox.showinfo("–£—Å–ø–µ—Ö", "–¢–æ–∫–µ–Ω —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω. –ë–æ—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω.")
                root.destroy()
            except Exception as e:
                messagebox.showerror("–û—à–∏–±–∫–∞", f"–ù–µ–≤–µ—Ä–Ω—ã–π —Ç–æ–∫–µ–Ω –∏–ª–∏ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏: {e}")
        else:
            messagebox.showerror("–û—à–∏–±–∫–∞", "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ç–æ–∫–µ–Ω.")

    save_button = tk.Button(root, text="–°–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ç–æ–∫–µ–Ω", command=save_token)
    save_button.pack(pady=10)

    root.mainloop()

def register_handlers():
    if bot:
        bot.message_handler(commands=['start'])(start)
        bot.message_handler(func=lambda message: message.text == "üîí –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –ü–ö")(lock_pc_button)
        bot.message_handler(func=lambda message: message.text == "üì∏ –°–∫—Ä–∏–Ω—à–æ—Ç")(screenshot_button)
        bot.message_handler(func=lambda message: message.text == "üé¨ –ó–∞–ø–∏—Å–∞—Ç—å –≤–∏–¥–µ–æ")(video_button)
        bot.message_handler(func=lambda message: message.text == "üîå –í—ã–∫–ª—é—á–∏—Ç—å –ü–ö")(shutdown_button)
        bot.message_handler(func=lambda message: message.text == "üóëÔ∏è –û—á–∏—Å—Ç–∏—Ç—å –¥–∞–Ω–Ω—ã–µ")(clear_data_button)
        bot.message_handler(commands=['lock'])(lock_pc_command)
        bot.message_handler(commands=['screenshot'])(screenshot_command)
        bot.message_handler(commands=['video'])(video_command)
        bot.message_handler(commands=['shutdown'])(shutdown_command)

@authorized
def lock_pc_button(message):
    lock_pc(message)

@authorized
def screenshot_button(message):
    send_screenshot(message)

@authorized
def video_button(message):
    send_video(message)

@authorized
def shutdown_button(message):
    result = shutdown_pc()
    bot.send_message(message.chat.id, result)

@authorized
def clear_data_button(message):
    clear_user_data(message)

@authorized
def lock_pc_command(message):
    lock_pc(message)

@authorized
def screenshot_command(message):
    send_screenshot(message)

@authorized
def video_command(message):
    send_video(message)

@authorized
def shutdown_command(message):
    result = shutdown_pc()
    bot.send_message(message.chat.id, result)

def run_bot():
    global bot, TOKEN_INITIALIZED

    if not TOKEN_INITIALIZED:
        ask_for_token()
        if not TOKEN_INITIALIZED:
            print("–¢–æ–∫–µ–Ω –Ω–µ –±—ã–ª –≤–≤–µ–¥–µ–Ω. –í—ã—Ö–æ–¥ –∏–∑ –ø—Ä–æ–≥—Ä–∞–º–º—ã.")
            return

    register_handlers()

    connected = False
    while True:
        try:
            bot.polling(none_stop=True)
            if not connected:
                print("–£—Å–ø–µ—à–Ω–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Telegram API!")
                connected = True
        except (ConnectionError, ReadTimeout) as e:
            print(f"–û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –∏–ª–∏ —Ç–∞–π–º–∞—É—Ç: {e}. –ü–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —á–µ—Ä–µ–∑ 10 —Å–µ–∫—É–Ω–¥...")
            connected = False
            time.sleep(10)
        except Exception as e:
            print(f"–î—Ä—É–≥–∞—è –æ—à–∏–±–∫–∞: {e}. –ü–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —á–µ—Ä–µ–∑ 10 —Å–µ–∫—É–Ω–¥...")
            connected = False
            time.sleep(10)

if __name__ == '__main__':
    if sys.platform != "win32":
        print("–≠—Ç–æ—Ç –±–æ—Ç –ø—Ä–µ–¥–Ω–∞–∑–Ω–∞—á–µ–Ω —Ç–æ–ª—å–∫–æ –¥–ª—è Windows!")
    else:
        run_bot()
